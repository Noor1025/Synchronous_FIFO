module Sync_FIFO(clk_i, rst_n_i, write_en_i, read_en_i, data_in_i, data_out_o, fifo_full_o, fifo_empty_o);
  input clk_i, rst_n_i, write_en_i, read_en_i;
  input [15:0] data_in_i;
  output fifo_full_o, fifo_empty_o;
  output reg [15:0] data_out_o;
  
  reg[3:0] write_ptr, read_ptr;
  
  reg [15:0] fifo_mem [7:0];
  
  // Reset FIFO
  
  always@(posedge clk_i or negedge rst_n_i)
    begin
      if(!rst_n_i)
        begin
          data_out_o <= 16'h0000;
          write_ptr <= 4'b0000;
          read_ptr <= 4'b0000;
        end
    end
  
  // Writing into FIFO
  
  always@(posedge clk_i)
    begin
      if(!fifo_full_o & write_en_i)
        begin 
          fifo_mem[write_ptr[2:0]] <= data_in_i;
          write_ptr <= write_ptr + 1'b1;
        end
    end
  
  // Reading from FIFO
  
  always@(posedge clk_i)
    begin
      if(!fifo_empty_o & read_en_i)
        begin
          data_out_o <= fifo_mem[read_ptr[2:0]];
          read_ptr <= read_ptr + 1'b1;
        end
    end
          
  // Empty Condition
  
  assign fifo_empty_o = (write_ptr == read_ptr);
  
  // Full Condition
  
  assign fifo_full_o = (write_ptr[3] ^ read_ptr[3]) & (write_ptr[2:0] == read_ptr[2:0]);
  
endmodule
